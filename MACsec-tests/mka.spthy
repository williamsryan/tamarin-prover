/*
MACsec Key Agreement Protocol
======================================

Authors:    Zachary Ratliff
Date:       June 2023

We always assume that Alice plays the role of the Key Server
*/

theory mkapsk
begin

builtins: symmetric-encryption, multiset
functions: kdf/2, mac/2, counter/1, snenc/3, sndec/2
predicates: LessEqual(x, y) <=> ((Ex z. x + z = y) | (x = y))
equations: sndec(snenc(message, key, nonce), key) = message

/* Configure the MACsec network to use a pre-shared CAK */
rule Preconfigure:
    [ 
      Fr(~cak)
    ]
  --[ Init(~cak) ]->
    [ 
      !AState(~cak, 'CONFIGURED', counter('1')), 
      !BState(~cak, 'WAITING', counter('1')),
      Out(<counter('1'), '1'>),
      !IsConfigured(~cak)
    ]

/* Establish the initial session between Alice and Bob */
rule EstablishSession:
    [
      !AState(~cak, 'CONFIGURED', nonce)
    ]
  -->
    [
      !AState(~cak, 'START', nonce),
      DistributeNewKey(~cak)
    ]

/* Alice (key server) performs SAK distribution */
rule DistributeSak:
    [ 
      Fr(~sak),
      !AState(~cak, 'START', nonce),
      DistributeNewKey(~cak)
    ]
  --[ DistributeSak(~cak, ~sak) ]->
    [ 
      !AState(~cak, 'WAITING', nonce), 
      Out(<senc(~sak, kdf('kek', ~cak)), nonce, mac(<senc(~sak, kdf('kek', ~cak)), nonce>, kdf('ick', ~cak))>),
      !ASak(~cak, ~sak)
    ]

/* Resend the SAK if acknowledgement never received */
rule ResendSak:
    [ 
      !AState(~cak, 'WAITING', nonce),
      !ASak(~cak, ~sak)
    ]
  --[ RedistributeSak(~cak, ~sak) ]->
    [ 
      Out(<senc(~sak, kdf('kek', ~cak)), nonce, mac(<senc(~sak, kdf('kek', ~cak)), nonce>, kdf('ick', ~cak))>)
    ]

/* Bob receives a session key on the channel */
rule ReceiveSak:
    [
      !BState(~cak, 'WAITING', nonce),
      In(<kwsak, newNonce, mac(<kwsak, newNonce>, kdf('ick', ~cak))>)
    ]
  --[ ReceiveSessionKey(~cak, sdec(kwsak, kdf('kek', ~cak))) ]->
    [
      ProcessSak(~cak, sdec(kwsak, kdf('kek', ~cak)), newNonce)
    ]

/* Bob receives the SAK on the channel */
rule InstallSak:
    let
      nonce = counter(x)
      newNonce = counter(y)
    in
    [ 
      !BState(~cak, 'WAITING', nonce),
      ProcessSak(~cak, ~sak, newNonce) 
    ]
  --[ _restrict(LessEqual(x, y)), InstallSak(~cak, ~sak) ]->
    [ 
      !BState(~cak, 'WAITING', newNonce),
      !BSak(~cak, ~sak),
      Out(mac(newNonce, kdf('ick', ~cak))) 
    ]

/* Bob is allowed to send multiple ACKs for redundancy */
rule ResendAck:
    [ 
      !BState(~cak, 'WAITING', newNonce),
      !BSak(~cak, ~sak)
    ]
  --[ ResendAck(~cak, ~sak) ]->
    [ 
      Out(mac(newNonce, kdf('ick', ~cak)))
    ]


/* Alice receives a SAK acknowledgement from Bob */ 
rule ReceiveAck: 
    let 
      nonce = counter(n) 
      newNonce = counter(n + '1')
    in
    [ 
      !AState(~cak, 'WAITING', nonce),
      !ASak(~cak, ~sak),
      In(mac(nonce, kdf('ick', ~cak)))
    ]
  --[ SakAcknowledgement(~cak, ~sak) ]->
    [ 
      !AState(~cak, 'SESSION', newNonce) 
    ]

/* Reveal the SAK */
rule Reveal_sak:
    [ !ASak(~cak, ~sak) ]
  --[ SakReveal(~cak, ~sak) ]->
    [ Out(~sak) ]

/* Reveal the CAK */
rule Reveal_cak:
    [ !IsConfigured(~cak) ]
  --[ CakReveal(~cak) ]->
    [ Out(~cak) ]

/* Reveal the KEK */
rule Reveal_kek:
    [ !IsConfigured(~cak) ]
  --[ KekReveal(~cak) ]->
    [ Out(kdf('kek', ~cak)) ]

/* Reveal the ICK */
rule Reveal_ick:
    [ !IsConfigured(~cak) ]
  --[ IckReveal(~cak) ]->
    [ Out(kdf('ick', ~cak)) ]

/* Allow SAK refreshing by the key server */
rule RefreshSak:
    [
      !AState(~cak, 'SESSION', nonce)
    ]
  --[ SakRefresh(~cak) ]->
    [
      !AState(~cak, 'START', nonce),
      DistributeNewKey(~cak)
    ]

/* Turn successful_mka into set of inductive proofs. */
lemma init_first [use_induction, reuse]:
      "All cak sak #i. DistributeSak(cak, sak) @ i ==> (Ex cak #j. Init(cak) @ j & j < i)"

lemma distsak_next [use_induction, reuse]:
      "All cak sak #i. SakAcknowledgement(cak, sak) @ i ==> (Ex cak sak #j. DistributeSak(cak, sak) @ j & j < i)"

/* Successful completion of MKA trace exists */
// lemma successful_mka: exists-trace //[hide_lemma=refresh_before_dist]
//     "Ex cak sak #i #j #k.
//         Init(cak) @ i &
//         DistributeSak(cak, sak) @ j & 
//         SakAcknowledgement(cak, sak) @ k"

/* CAK remains secret unless there was a CAK reveal */
lemma cak_secrecy[reuse]:
    "All cak #i #j.
        Init(cak) @ i
        & K(cak) @ j ==> (Ex #r. CakReveal(cak) @ r)"

/* CAK remains secret unless there was a CAK reveal */
lemma kek_secrecy[reuse]:
    "All cak #i #j.
        Init(cak) @ i
        & K(kdf('kek', cak)) @ j ==> ((Ex #r. CakReveal(cak) @ r) | (Ex #t. KekReveal(cak) @ t))"

/* CAK remains secret unless there was a CAK reveal */
lemma ick_secrecy[reuse]:
    "All cak #i #j.
        Init(cak) @ i
        & K(kdf('ick', cak)) @ j ==> ((Ex #r. CakReveal(cak) @ r) | (Ex #t. IckReveal(cak) @ t))"


/* SAK remains secret unless there was a CAK reveal */
// This is one that doesn't terminate.
lemma sak_secrecy:
    "All cak sak #i #j #k.
        Init(cak) @ i
        & DistributeSak(cak, sak) @ j
        & K(sak) @ k 
        ==> ((Ex #r. SakReveal(cak, sak) @ r) | (Ex #t. CakReveal(cak) @ t) | (Ex #u. KekReveal(cak) @ u))"

/* Alice will never distribute the same SAK twice */
lemma no_sak_reuse[reuse]:
    "not(
        Ex cak sak #i #j. DistributeSak(cak, sak) @ i
        & DistributeSak(cak, sak) @ j
        & i < j
    )"

/* Integrity of SAK */
/* If Bob receives a SAK, then Alice sent that SAK -- unless there was an ICK or CAK reveal at some earlier point */
// This is one that doesn't terminate.
lemma sak_integrity[reuse]:
    "(All cak sak #i. SakAcknowledgement(cak, sak) @ i
    ==> ((Ex #a. DistributeSak(cak, sak) @ a & a < i) | (Ex #t. IckReveal(cak) @ t & t < i) | (Ex #r. CakReveal(cak) @ r & r < i)))"

end

